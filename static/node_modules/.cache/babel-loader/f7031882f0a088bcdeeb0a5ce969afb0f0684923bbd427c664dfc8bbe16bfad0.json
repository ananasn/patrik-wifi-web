{"ast":null,"code":"import Keyboard from \"simple-keyboard\";\nimport \"simple-keyboard/build/css/index.css\";\nexport default {\n  name: \"SimpleKeyboard\",\n  props: {\n    keyboardClass: {\n      default: \"simple-keyboard\",\n      type: String\n    },\n    input: {\n      type: String\n    }\n  },\n  data: () => ({\n    keyboard: null\n  }),\n  mounted() {\n    this.keyboard = new Keyboard(this.keyboardClass, {\n      onChange: this.onChange,\n      onKeyPress: this.onKeyPress,\n      display: {\n        \"{space}\": \"\",\n        \"{tab}\": \"Tab\",\n        \"{lock}\": \"⇪\",\n        \"{shift}\": \"⇧\",\n        \"{bksp}\": \"⌫\",\n        \"{enter}\": \"Connect\"\n      },\n      buttonTheme: [{\n        class: \"hg-red\",\n        buttons: \"Q W E R T Y q w e r t y\"\n      }, {\n        class: \"hg-highlight\",\n        buttons: \"Q q\"\n      }]\n    });\n  },\n  methods: {\n    onChange(input) {\n      this.$emit(\"onChange\", input);\n    },\n    onKeyPress(button) {\n      this.$emit(\"onKeyPress\", button);\n\n      /**\n       * If you want to handle the shift and caps lock buttons\n       */\n      if (button === \"{shift}\" || button === \"{lock}\") this.handleShift();\n    },\n    handleShift() {\n      let currentLayout = this.keyboard.options.layoutName;\n      let shiftToggle = currentLayout === \"default\" ? \"shift\" : \"default\";\n      this.keyboard.setOptions({\n        layoutName: shiftToggle\n      });\n    }\n  },\n  watch: {\n    input(input) {\n      this.keyboard.setInput(input);\n    }\n  }\n};","map":{"version":3,"names":["Keyboard","name","props","keyboardClass","default","type","String","input","data","keyboard","mounted","onChange","onKeyPress","display","buttonTheme","class","buttons","methods","$emit","button","handleShift","currentLayout","options","layoutName","shiftToggle","setOptions","watch","setInput"],"sources":["src/SimpleKeyboard.vue"],"sourcesContent":["<template>\n  <div :class=\"keyboardClass\"></div>\n</template>\n\n<script>\nimport Keyboard from \"simple-keyboard\";\nimport \"simple-keyboard/build/css/index.css\";\n\nexport default {\n  name: \"SimpleKeyboard\",\n  props: {\n    keyboardClass: {\n      default: \"simple-keyboard\",\n      type: String\n    },\n    input: {\n      type: String\n    }\n  },\n  data: () => ({\n    keyboard: null\n  }),\n  mounted() {\n    this.keyboard = new Keyboard(this.keyboardClass, {\n      onChange: this.onChange,\n      onKeyPress: this.onKeyPress,\n      display: {\n        \"{space}\": \"\",\n        \"{tab}\": \"Tab\", \n        \"{lock}\": \"⇪\",\n        \"{shift}\": \"⇧\",\n        \"{bksp}\": \"⌫\",\n        \"{enter}\": \"Connect\",\n      },\n      buttonTheme: [{\n        class: \"hg-red\",\n        buttons: \"Q W E R T Y q w e r t y\"\n      },\n      {\n        class: \"hg-highlight\",\n        buttons: \"Q q\"\n      }\n  ]\n    });\n  },\n  methods: {\n    onChange(input) {\n      this.$emit(\"onChange\", input);\n    },\n    onKeyPress(button) {\n      this.$emit(\"onKeyPress\", button);\n\n      /**\n       * If you want to handle the shift and caps lock buttons\n       */\n      if (button === \"{shift}\" || button === \"{lock}\") this.handleShift();\n    },\n    handleShift() {\n      let currentLayout = this.keyboard.options.layoutName;\n      let shiftToggle = currentLayout === \"default\" ? \"shift\" : \"default\";\n\n      this.keyboard.setOptions({\n        layoutName: shiftToggle\n      });\n    }\n  },\n  watch: {\n    input(input) {\n      this.keyboard.setInput(input);\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n</style>\n"],"mappings":"AAKA,OAAAA,QAAA;AACA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,aAAA;MACAC,OAAA;MACAC,IAAA,EAAAC;IACA;IACAC,KAAA;MACAF,IAAA,EAAAC;IACA;EACA;EACAE,IAAA,EAAAA,CAAA;IACAC,QAAA;EACA;EACAC,QAAA;IACA,KAAAD,QAAA,OAAAT,QAAA,MAAAG,aAAA;MACAQ,QAAA,OAAAA,QAAA;MACAC,UAAA,OAAAA,UAAA;MACAC,OAAA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;MACAC,WAAA;QACAC,KAAA;QACAC,OAAA;MACA,GACA;QACAD,KAAA;QACAC,OAAA;MACA;IAEA;EACA;EACAC,OAAA;IACAN,SAAAJ,KAAA;MACA,KAAAW,KAAA,aAAAX,KAAA;IACA;IACAK,WAAAO,MAAA;MACA,KAAAD,KAAA,eAAAC,MAAA;;MAEA;AACA;AACA;MACA,IAAAA,MAAA,kBAAAA,MAAA,oBAAAC,WAAA;IACA;IACAA,YAAA;MACA,IAAAC,aAAA,QAAAZ,QAAA,CAAAa,OAAA,CAAAC,UAAA;MACA,IAAAC,WAAA,GAAAH,aAAA;MAEA,KAAAZ,QAAA,CAAAgB,UAAA;QACAF,UAAA,EAAAC;MACA;IACA;EACA;EACAE,KAAA;IACAnB,WAAA;MACA,KAAAE,QAAA,CAAAkB,QAAA,CAAApB,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}